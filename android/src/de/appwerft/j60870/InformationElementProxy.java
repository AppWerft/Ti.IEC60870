/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package de.appwerft.j60870;

import java.io.IOException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.concurrent.TimeoutException;

import javax.net.SocketFactory;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollProxy;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.openmuc.j60870.ASdu;
import org.openmuc.j60870.CauseOfTransmission;
import org.openmuc.j60870.ClientConnectionBuilder;
import org.openmuc.j60870.Connection;
import org.openmuc.j60870.ConnectionEventListener;
import org.openmuc.j60870.IeAckFileOrSectionQualifier;
import org.openmuc.j60870.IeBinaryCounterReading;
import org.openmuc.j60870.IeCauseOfInitialization;
import org.openmuc.j60870.InformationElement;
import org.openmuc.j60870.InformationObject;
import org.openmuc.j60870.TypeId;

// This proxy can be created by calling J60870.createExample({message: "hello world"})
@Kroll.proxy(creatableInModule = J60870Module.class)
public class InformationElementProxy extends KrollProxy {
	private static final String LCAT = "J60870";
	private InformationElement infoElem;

	public InformationElementProxy() {
		super();
	}

	@Override
	public void handleCreationDict(
			@Kroll.argument(optional = true) KrollDict opts) {
		int informationObjectAddress = 0;

	}

	@Kroll.method
	public IeAckFileOrSectionQualifier createAFQ(int action, int notice) {
		return new IeAckFileOrSectionQualifier(action, notice);
	}

	@Kroll.method
	public IeBinaryCounterReading createBCR(int counterReading,
			int sequenceNumber, boolean carry, boolean counterAdjusted,
			boolean invalid) {
		return new IeBinaryCounterReading(counterReading, sequenceNumber,
				carry, counterAdjusted, invalid);
	}

	@Kroll.method
	public IeCauseOfInitialization createCOI(int value,
			boolean initAfterParameterChange) {
		return new IeCauseOfInitialization(value, initAfterParameterChange);
	}

}