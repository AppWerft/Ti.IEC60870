/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package de.appwerft.j60870;

import java.io.IOException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.concurrent.TimeoutException;

import javax.net.SocketFactory;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollProxy;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.openmuc.j60870.ASdu;
import org.openmuc.j60870.CauseOfTransmission;
import org.openmuc.j60870.ClientConnectionBuilder;
import org.openmuc.j60870.Connection;
import org.openmuc.j60870.ConnectionEventListener;
import org.openmuc.j60870.InformationObject;
import org.openmuc.j60870.TypeId;

// This proxy can be created by calling J60870.createExample({message: "hello world"})
@Kroll.proxy(creatableInModule = J60870Module.class)
public class ASduProxy extends KrollProxy {
	// Standard Debugging variables
	private static final String LCAT = "J60870";
	// connection params
	private InetAddress address;
	private int port;
	private Connection connection;
	private static final String INTERROGATION_ACTION_KEY = "i";
	private static final String CLOCK_SYNC_ACTION_KEY = "c";
	private KrollFunction onLoad;
	private KrollFunction onError;
	private KrollFunction onClosed;
	private ASdu asdu;

	// Constructor
	public ASduProxy() {
		super();
	}

	/*
	 * The application service data unit (ASDU). The ASDU is the payload of the
	 * application protocol data unit (APDU). Its structure is defined in IEC
	 * 60870-5-101. The ASDU consists of the Data Unit Identifier and a number
	 * of Information Objects. The Data Unit Identifier contains:
	 * 
	 * TypeId (1 byte)
	 * 
	 * Variable Structure Qualifier (1 byte) - specifies how many Information
	 * Objects and Information Element sets are part of the ASDU.
	 * 
	 * Cause of Transmission (COT, 1 or 2 bytes) - The first byte codes the
	 * actual CauseOfTransmission, a bit indicating whether the message was sent
	 * for test purposes only and a bit indicating whether a confirmation
	 * message is positive or negative. The optional second byte of the Cause of
	 * Transmission field is the Originator Address. It is the address of the
	 * originating controlling station so that responses can be routed back to
	 * it.
	 * 
	 * Common Address of ASDU (1 or 2 bytes) - the address of the target station
	 * or the broadcast address. If the field length of the common address is 1
	 * byte then the addresses 1 to 254 are used to address a particular station
	 * (station address) and 255 is used for broadcast addressing. If the field
	 * length of the common address is 2 bytes then the addresses 1 to 65534 are
	 * used to address a particular station and 65535 is used for broadcast
	 * addressing. Broadcast addressing is only allowed for certain TypeIDs.
	 * 
	 * A list of Information Objects containing the actual actual data in the
	 * form of Information Elements.
	 */
	@Override
	public void handleCreationDict(
			@Kroll.argument(optional = true) KrollDict opts) {
		TypeId typeId = TypeId.valueOf("C_BO_NA_1");
		boolean isSequenceOfElements = false;
		CauseOfTransmission causeOfTransmission = CauseOfTransmission
				.valueOf("ACTIVATION ");
		boolean test = false;
		boolean negativeConfirm = false;
		int originatorAddress = 0;
		int commonAddress = 0;
		InformationObject[] informationObjects;

		super.handleCreationDict(opts);

		if (opts.containsKeyAndNotNull("typeId")) {
			typeId = TypeId.valueOf(opts.getString("typeId"));
		}
		if (opts.containsKeyAndNotNull("COT")) {
			causeOfTransmission = CauseOfTransmission.valueOf(opts
					.getString("COT"));
		}
		if (opts.containsKeyAndNotNull("informationObjects")) {
			informationObjectProxy proxy;
			Object o = opts.get("informationObjects");
		}
		asdu = new ASdu(typeId, isSequenceOfElements, causeOfTransmission,
				test, negativeConfirm, originatorAddress, commonAddress,
				informationObjects);
	}

}